#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuanLyGiaoDichXe.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QuanLyGiaoDichXe")]
	public partial class QuanLyGiaoDichXeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertInput(Input instance);
    partial void UpdateInput(Input instance);
    partial void DeleteInput(Input instance);
    partial void InsertInputInfo(InputInfo instance);
    partial void UpdateInputInfo(InputInfo instance);
    partial void DeleteInputInfo(InputInfo instance);
    partial void InsertObject(Object instance);
    partial void UpdateObject(Object instance);
    partial void DeleteObject(Object instance);
    partial void InsertOutput(Output instance);
    partial void UpdateOutput(Output instance);
    partial void DeleteOutput(Output instance);
    partial void InsertOutputInfo(OutputInfo instance);
    partial void UpdateOutputInfo(OutputInfo instance);
    partial void DeleteOutputInfo(OutputInfo instance);
    partial void InsertSuplier(Suplier instance);
    partial void UpdateSuplier(Suplier instance);
    partial void DeleteSuplier(Suplier instance);
    partial void InsertUnit(Unit instance);
    partial void UpdateUnit(Unit instance);
    partial void DeleteUnit(Unit instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public QuanLyGiaoDichXeDataContext() : 
				base(global::QuanLyGiaoDichXe.Properties.Settings.Default.QuanLyGiaoDichXeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyGiaoDichXeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyGiaoDichXeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyGiaoDichXeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyGiaoDichXeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Input> Inputs
		{
			get
			{
				return this.GetTable<Input>();
			}
		}
		
		public System.Data.Linq.Table<InputInfo> InputInfos
		{
			get
			{
				return this.GetTable<InputInfo>();
			}
		}
		
		public System.Data.Linq.Table<Object> Objects
		{
			get
			{
				return this.GetTable<Object>();
			}
		}
		
		public System.Data.Linq.Table<Output> Outputs
		{
			get
			{
				return this.GetTable<Output>();
			}
		}
		
		public System.Data.Linq.Table<OutputInfo> OutputInfos
		{
			get
			{
				return this.GetTable<OutputInfo>();
			}
		}
		
		public System.Data.Linq.Table<Suplier> Supliers
		{
			get
			{
				return this.GetTable<Suplier>();
			}
		}
		
		public System.Data.Linq.Table<Unit> Units
		{
			get
			{
				return this.GetTable<Unit>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Username;
		
		private string _DisplayName;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Email;
		
		private string _MoreInfo;
		
		private System.Nullable<System.DateTime> _ContractDate;
		
		private EntitySet<OutputInfo> _OutputInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMoreInfoChanging(string value);
    partial void OnMoreInfoChanged();
    partial void OnContractDateChanging(System.Nullable<System.DateTime> value);
    partial void OnContractDateChanged();
    #endregion
		
		public Customer()
		{
			this._OutputInfos = new EntitySet<OutputInfo>(new Action<OutputInfo>(this.attach_OutputInfos), new Action<OutputInfo>(this.detach_OutputInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(100)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoreInfo", DbType="NVarChar(200)")]
		public string MoreInfo
		{
			get
			{
				return this._MoreInfo;
			}
			set
			{
				if ((this._MoreInfo != value))
				{
					this.OnMoreInfoChanging(value);
					this.SendPropertyChanging();
					this._MoreInfo = value;
					this.SendPropertyChanged("MoreInfo");
					this.OnMoreInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractDate", DbType="Date")]
		public System.Nullable<System.DateTime> ContractDate
		{
			get
			{
				return this._ContractDate;
			}
			set
			{
				if ((this._ContractDate != value))
				{
					this.OnContractDateChanging(value);
					this.SendPropertyChanging();
					this._ContractDate = value;
					this.SendPropertyChanged("ContractDate");
					this.OnContractDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_OutputInfo", Storage="_OutputInfos", ThisKey="Id", OtherKey="IdCustomer")]
		public EntitySet<OutputInfo> OutputInfos
		{
			get
			{
				return this._OutputInfos;
			}
			set
			{
				this._OutputInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OutputInfos(OutputInfo entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_OutputInfos(OutputInfo entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Input")]
	public partial class Input : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private System.Nullable<System.DateTime> _DateInput;
		
		private EntitySet<InputInfo> _InputInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnDateInputChanging(System.Nullable<System.DateTime> value);
    partial void OnDateInputChanged();
    #endregion
		
		public Input()
		{
			this._InputInfos = new EntitySet<InputInfo>(new Action<InputInfo>(this.attach_InputInfos), new Action<InputInfo>(this.detach_InputInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateInput", DbType="Date")]
		public System.Nullable<System.DateTime> DateInput
		{
			get
			{
				return this._DateInput;
			}
			set
			{
				if ((this._DateInput != value))
				{
					this.OnDateInputChanging(value);
					this.SendPropertyChanging();
					this._DateInput = value;
					this.SendPropertyChanged("DateInput");
					this.OnDateInputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Input_InputInfo", Storage="_InputInfos", ThisKey="Id", OtherKey="IdInput")]
		public EntitySet<InputInfo> InputInfos
		{
			get
			{
				return this._InputInfos;
			}
			set
			{
				this._InputInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InputInfos(InputInfo entity)
		{
			this.SendPropertyChanging();
			entity.Input = this;
		}
		
		private void detach_InputInfos(InputInfo entity)
		{
			this.SendPropertyChanging();
			entity.Input = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InputInfo")]
	public partial class InputInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _IdObject;
		
		private string _IdInput;
		
		private System.Nullable<int> _count;
		
		private System.Nullable<double> _InputPrice;
		
		private System.Nullable<double> _OutputPrice;
		
		private string _Status;
		
		private EntitySet<OutputInfo> _OutputInfos;
		
		private EntityRef<Input> _Input;
		
		private EntityRef<Object> _Object;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnIdObjectChanging(string value);
    partial void OnIdObjectChanged();
    partial void OnIdInputChanging(string value);
    partial void OnIdInputChanged();
    partial void OncountChanging(System.Nullable<int> value);
    partial void OncountChanged();
    partial void OnInputPriceChanging(System.Nullable<double> value);
    partial void OnInputPriceChanged();
    partial void OnOutputPriceChanging(System.Nullable<double> value);
    partial void OnOutputPriceChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public InputInfo()
		{
			this._OutputInfos = new EntitySet<OutputInfo>(new Action<OutputInfo>(this.attach_OutputInfos), new Action<OutputInfo>(this.detach_OutputInfos));
			this._Input = default(EntityRef<Input>);
			this._Object = default(EntityRef<Object>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdObject", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string IdObject
		{
			get
			{
				return this._IdObject;
			}
			set
			{
				if ((this._IdObject != value))
				{
					if (this._Object.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdObjectChanging(value);
					this.SendPropertyChanging();
					this._IdObject = value;
					this.SendPropertyChanged("IdObject");
					this.OnIdObjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdInput", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string IdInput
		{
			get
			{
				return this._IdInput;
			}
			set
			{
				if ((this._IdInput != value))
				{
					if (this._Input.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdInputChanging(value);
					this.SendPropertyChanging();
					this._IdInput = value;
					this.SendPropertyChanged("IdInput");
					this.OnIdInputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_count", DbType="Int")]
		public System.Nullable<int> count
		{
			get
			{
				return this._count;
			}
			set
			{
				if ((this._count != value))
				{
					this.OncountChanging(value);
					this.SendPropertyChanging();
					this._count = value;
					this.SendPropertyChanged("count");
					this.OncountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InputPrice", DbType="Float")]
		public System.Nullable<double> InputPrice
		{
			get
			{
				return this._InputPrice;
			}
			set
			{
				if ((this._InputPrice != value))
				{
					this.OnInputPriceChanging(value);
					this.SendPropertyChanging();
					this._InputPrice = value;
					this.SendPropertyChanged("InputPrice");
					this.OnInputPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutputPrice", DbType="Float")]
		public System.Nullable<double> OutputPrice
		{
			get
			{
				return this._OutputPrice;
			}
			set
			{
				if ((this._OutputPrice != value))
				{
					this.OnOutputPriceChanging(value);
					this.SendPropertyChanging();
					this._OutputPrice = value;
					this.SendPropertyChanged("OutputPrice");
					this.OnOutputPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(100)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InputInfo_OutputInfo", Storage="_OutputInfos", ThisKey="Id", OtherKey="IdInputInfor")]
		public EntitySet<OutputInfo> OutputInfos
		{
			get
			{
				return this._OutputInfos;
			}
			set
			{
				this._OutputInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Input_InputInfo", Storage="_Input", ThisKey="IdInput", OtherKey="Id", IsForeignKey=true)]
		public Input Input
		{
			get
			{
				return this._Input.Entity;
			}
			set
			{
				Input previousValue = this._Input.Entity;
				if (((previousValue != value) 
							|| (this._Input.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Input.Entity = null;
						previousValue.InputInfos.Remove(this);
					}
					this._Input.Entity = value;
					if ((value != null))
					{
						value.InputInfos.Add(this);
						this._IdInput = value.Id;
					}
					else
					{
						this._IdInput = default(string);
					}
					this.SendPropertyChanged("Input");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_InputInfo", Storage="_Object", ThisKey="IdObject", OtherKey="Id", IsForeignKey=true)]
		public Object Object
		{
			get
			{
				return this._Object.Entity;
			}
			set
			{
				Object previousValue = this._Object.Entity;
				if (((previousValue != value) 
							|| (this._Object.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Object.Entity = null;
						previousValue.InputInfos.Remove(this);
					}
					this._Object.Entity = value;
					if ((value != null))
					{
						value.InputInfos.Add(this);
						this._IdObject = value.Id;
					}
					else
					{
						this._IdObject = default(string);
					}
					this.SendPropertyChanged("Object");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OutputInfos(OutputInfo entity)
		{
			this.SendPropertyChanging();
			entity.InputInfo = this;
		}
		
		private void detach_OutputInfos(OutputInfo entity)
		{
			this.SendPropertyChanging();
			entity.InputInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Objects")]
	public partial class Object : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _DisplayName;
		
		private int _IdUnit;
		
		private int _IdSuplier;
		
		private EntitySet<InputInfo> _InputInfos;
		
		private EntitySet<OutputInfo> _OutputInfos;
		
		private EntityRef<Suplier> _Suplier;
		
		private EntityRef<Unit> _Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnIdUnitChanging(int value);
    partial void OnIdUnitChanged();
    partial void OnIdSuplierChanging(int value);
    partial void OnIdSuplierChanged();
    #endregion
		
		public Object()
		{
			this._InputInfos = new EntitySet<InputInfo>(new Action<InputInfo>(this.attach_InputInfos), new Action<InputInfo>(this.detach_InputInfos));
			this._OutputInfos = new EntitySet<OutputInfo>(new Action<OutputInfo>(this.attach_OutputInfos), new Action<OutputInfo>(this.detach_OutputInfos));
			this._Suplier = default(EntityRef<Suplier>);
			this._Unit = default(EntityRef<Unit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(100)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUnit", DbType="Int NOT NULL")]
		public int IdUnit
		{
			get
			{
				return this._IdUnit;
			}
			set
			{
				if ((this._IdUnit != value))
				{
					if (this._Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUnitChanging(value);
					this.SendPropertyChanging();
					this._IdUnit = value;
					this.SendPropertyChanged("IdUnit");
					this.OnIdUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdSuplier", DbType="Int NOT NULL")]
		public int IdSuplier
		{
			get
			{
				return this._IdSuplier;
			}
			set
			{
				if ((this._IdSuplier != value))
				{
					if (this._Suplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdSuplierChanging(value);
					this.SendPropertyChanging();
					this._IdSuplier = value;
					this.SendPropertyChanged("IdSuplier");
					this.OnIdSuplierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_InputInfo", Storage="_InputInfos", ThisKey="Id", OtherKey="IdObject")]
		public EntitySet<InputInfo> InputInfos
		{
			get
			{
				return this._InputInfos;
			}
			set
			{
				this._InputInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_OutputInfo", Storage="_OutputInfos", ThisKey="Id", OtherKey="IdObject")]
		public EntitySet<OutputInfo> OutputInfos
		{
			get
			{
				return this._OutputInfos;
			}
			set
			{
				this._OutputInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Suplier_Object", Storage="_Suplier", ThisKey="IdSuplier", OtherKey="Id", IsForeignKey=true)]
		public Suplier Suplier
		{
			get
			{
				return this._Suplier.Entity;
			}
			set
			{
				Suplier previousValue = this._Suplier.Entity;
				if (((previousValue != value) 
							|| (this._Suplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Suplier.Entity = null;
						previousValue.Objects.Remove(this);
					}
					this._Suplier.Entity = value;
					if ((value != null))
					{
						value.Objects.Add(this);
						this._IdSuplier = value.Id;
					}
					else
					{
						this._IdSuplier = default(int);
					}
					this.SendPropertyChanged("Suplier");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_Object", Storage="_Unit", ThisKey="IdUnit", OtherKey="Id", IsForeignKey=true)]
		public Unit Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				Unit previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.Objects.Remove(this);
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.Objects.Add(this);
						this._IdUnit = value.Id;
					}
					else
					{
						this._IdUnit = default(int);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InputInfos(InputInfo entity)
		{
			this.SendPropertyChanging();
			entity.Object = this;
		}
		
		private void detach_InputInfos(InputInfo entity)
		{
			this.SendPropertyChanging();
			entity.Object = null;
		}
		
		private void attach_OutputInfos(OutputInfo entity)
		{
			this.SendPropertyChanging();
			entity.Object = this;
		}
		
		private void detach_OutputInfos(OutputInfo entity)
		{
			this.SendPropertyChanging();
			entity.Object = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Output")]
	public partial class Output : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private System.Nullable<System.DateTime> _DateInput;
		
		private EntityRef<OutputInfo> _OutputInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnDateInputChanging(System.Nullable<System.DateTime> value);
    partial void OnDateInputChanged();
    #endregion
		
		public Output()
		{
			this._OutputInfo = default(EntityRef<OutputInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateInput", DbType="Date")]
		public System.Nullable<System.DateTime> DateInput
		{
			get
			{
				return this._DateInput;
			}
			set
			{
				if ((this._DateInput != value))
				{
					this.OnDateInputChanging(value);
					this.SendPropertyChanging();
					this._DateInput = value;
					this.SendPropertyChanged("DateInput");
					this.OnDateInputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Output_OutputInfo", Storage="_OutputInfo", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public OutputInfo OutputInfo
		{
			get
			{
				return this._OutputInfo.Entity;
			}
			set
			{
				OutputInfo previousValue = this._OutputInfo.Entity;
				if (((previousValue != value) 
							|| (this._OutputInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OutputInfo.Entity = null;
						previousValue.Output = null;
					}
					this._OutputInfo.Entity = value;
					if ((value != null))
					{
						value.Output = this;
					}
					this.SendPropertyChanged("OutputInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OutputInfo")]
	public partial class OutputInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _IdObject;
		
		private string _IdInputInfor;
		
		private int _IdCustomer;
		
		private System.Nullable<int> _count;
		
		private string _Status;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Object> _Object;
		
		private EntityRef<InputInfo> _InputInfo;
		
		private EntityRef<Output> _Output;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnIdObjectChanging(string value);
    partial void OnIdObjectChanged();
    partial void OnIdInputInforChanging(string value);
    partial void OnIdInputInforChanged();
    partial void OnIdCustomerChanging(int value);
    partial void OnIdCustomerChanged();
    partial void OncountChanging(System.Nullable<int> value);
    partial void OncountChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public OutputInfo()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Object = default(EntityRef<Object>);
			this._InputInfo = default(EntityRef<InputInfo>);
			this._Output = default(EntityRef<Output>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Output.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdObject", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string IdObject
		{
			get
			{
				return this._IdObject;
			}
			set
			{
				if ((this._IdObject != value))
				{
					if (this._Object.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdObjectChanging(value);
					this.SendPropertyChanging();
					this._IdObject = value;
					this.SendPropertyChanged("IdObject");
					this.OnIdObjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdInputInfor", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string IdInputInfor
		{
			get
			{
				return this._IdInputInfor;
			}
			set
			{
				if ((this._IdInputInfor != value))
				{
					if (this._InputInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdInputInforChanging(value);
					this.SendPropertyChanging();
					this._IdInputInfor = value;
					this.SendPropertyChanged("IdInputInfor");
					this.OnIdInputInforChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCustomer", DbType="Int NOT NULL")]
		public int IdCustomer
		{
			get
			{
				return this._IdCustomer;
			}
			set
			{
				if ((this._IdCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCustomerChanging(value);
					this.SendPropertyChanging();
					this._IdCustomer = value;
					this.SendPropertyChanged("IdCustomer");
					this.OnIdCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_count", DbType="Int")]
		public System.Nullable<int> count
		{
			get
			{
				return this._count;
			}
			set
			{
				if ((this._count != value))
				{
					this.OncountChanging(value);
					this.SendPropertyChanging();
					this._count = value;
					this.SendPropertyChanged("count");
					this.OncountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(100)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_OutputInfo", Storage="_Customer", ThisKey="IdCustomer", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.OutputInfos.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.OutputInfos.Add(this);
						this._IdCustomer = value.Id;
					}
					else
					{
						this._IdCustomer = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_OutputInfo", Storage="_Object", ThisKey="IdObject", OtherKey="Id", IsForeignKey=true)]
		public Object Object
		{
			get
			{
				return this._Object.Entity;
			}
			set
			{
				Object previousValue = this._Object.Entity;
				if (((previousValue != value) 
							|| (this._Object.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Object.Entity = null;
						previousValue.OutputInfos.Remove(this);
					}
					this._Object.Entity = value;
					if ((value != null))
					{
						value.OutputInfos.Add(this);
						this._IdObject = value.Id;
					}
					else
					{
						this._IdObject = default(string);
					}
					this.SendPropertyChanged("Object");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InputInfo_OutputInfo", Storage="_InputInfo", ThisKey="IdInputInfor", OtherKey="Id", IsForeignKey=true)]
		public InputInfo InputInfo
		{
			get
			{
				return this._InputInfo.Entity;
			}
			set
			{
				InputInfo previousValue = this._InputInfo.Entity;
				if (((previousValue != value) 
							|| (this._InputInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InputInfo.Entity = null;
						previousValue.OutputInfos.Remove(this);
					}
					this._InputInfo.Entity = value;
					if ((value != null))
					{
						value.OutputInfos.Add(this);
						this._IdInputInfor = value.Id;
					}
					else
					{
						this._IdInputInfor = default(string);
					}
					this.SendPropertyChanged("InputInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Output_OutputInfo", Storage="_Output", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Output Output
		{
			get
			{
				return this._Output.Entity;
			}
			set
			{
				Output previousValue = this._Output.Entity;
				if (((previousValue != value) 
							|| (this._Output.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Output.Entity = null;
						previousValue.OutputInfo = null;
					}
					this._Output.Entity = value;
					if ((value != null))
					{
						value.OutputInfo = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(string);
					}
					this.SendPropertyChanged("Output");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Suplier")]
	public partial class Suplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Username;
		
		private string _DisplayName;
		
		private string _Address;
		
		private string _Phone;
		
		private string _Email;
		
		private string _MoreInfo;
		
		private System.Nullable<System.DateTime> _ContractDate;
		
		private EntitySet<Object> _Objects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMoreInfoChanging(string value);
    partial void OnMoreInfoChanged();
    partial void OnContractDateChanging(System.Nullable<System.DateTime> value);
    partial void OnContractDateChanged();
    #endregion
		
		public Suplier()
		{
			this._Objects = new EntitySet<Object>(new Action<Object>(this.attach_Objects), new Action<Object>(this.detach_Objects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(100)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoreInfo", DbType="NVarChar(200)")]
		public string MoreInfo
		{
			get
			{
				return this._MoreInfo;
			}
			set
			{
				if ((this._MoreInfo != value))
				{
					this.OnMoreInfoChanging(value);
					this.SendPropertyChanging();
					this._MoreInfo = value;
					this.SendPropertyChanged("MoreInfo");
					this.OnMoreInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractDate", DbType="Date")]
		public System.Nullable<System.DateTime> ContractDate
		{
			get
			{
				return this._ContractDate;
			}
			set
			{
				if ((this._ContractDate != value))
				{
					this.OnContractDateChanging(value);
					this.SendPropertyChanging();
					this._ContractDate = value;
					this.SendPropertyChanged("ContractDate");
					this.OnContractDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Suplier_Object", Storage="_Objects", ThisKey="Id", OtherKey="IdSuplier")]
		public EntitySet<Object> Objects
		{
			get
			{
				return this._Objects;
			}
			set
			{
				this._Objects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Objects(Object entity)
		{
			this.SendPropertyChanging();
			entity.Suplier = this;
		}
		
		private void detach_Objects(Object entity)
		{
			this.SendPropertyChanging();
			entity.Suplier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Unit")]
	public partial class Unit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _DisplayName;
		
		private EntitySet<Object> _Objects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    #endregion
		
		public Unit()
		{
			this._Objects = new EntitySet<Object>(new Action<Object>(this.attach_Objects), new Action<Object>(this.detach_Objects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(100)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_Object", Storage="_Objects", ThisKey="Id", OtherKey="IdUnit")]
		public EntitySet<Object> Objects
		{
			get
			{
				return this._Objects;
			}
			set
			{
				this._Objects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Objects(Object entity)
		{
			this.SendPropertyChanging();
			entity.Unit = this;
		}
		
		private void detach_Objects(Object entity)
		{
			this.SendPropertyChanging();
			entity.Unit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _DisplayName;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    #endregion
		
		public UserRole()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(100)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRole_User", Storage="_Users", ThisKey="Id", OtherKey="IdRole")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserRole = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _DisplayName;
		
		private string _Username;
		
		private string _Password;
		
		private int _IdRole;
		
		private EntityRef<UserRole> _UserRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIdRoleChanging(int value);
    partial void OnIdRoleChanged();
    #endregion
		
		public User()
		{
			this._UserRole = default(EntityRef<UserRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(100)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdRole", DbType="Int NOT NULL")]
		public int IdRole
		{
			get
			{
				return this._IdRole;
			}
			set
			{
				if ((this._IdRole != value))
				{
					if (this._UserRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRoleChanging(value);
					this.SendPropertyChanging();
					this._IdRole = value;
					this.SendPropertyChanged("IdRole");
					this.OnIdRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRole_User", Storage="_UserRole", ThisKey="IdRole", OtherKey="Id", IsForeignKey=true)]
		public UserRole UserRole
		{
			get
			{
				return this._UserRole.Entity;
			}
			set
			{
				UserRole previousValue = this._UserRole.Entity;
				if (((previousValue != value) 
							|| (this._UserRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRole.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._UserRole.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._IdRole = value.Id;
					}
					else
					{
						this._IdRole = default(int);
					}
					this.SendPropertyChanged("UserRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
